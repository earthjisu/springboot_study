<div id="comments-list">
    {{#commentDtos}}<!--반복해서 댓글을 보여줌. 컨트롤러에서 Model에 데이터를 등록해야 사용 가능-->
        <div class="card m-2" id="comments-{{id}}">  <!--댓글의 아이디값이 추가되어 삽입. div class="card": 부트스트랩 card 사용-->
            <div class="card-header">
                {{nickname}}
                <!-- 모달 트리거 버튼 -->
                <button type="button"
                        class="btn btn-sm btn-outline-primary"
                        data-bs-toggle="modal"
                        data-bs-target="#comment-edit-modal"
                        data-bs-id="{{id}}"
                        data-bs-nickname="{{nickname}}"
                        data-bs-body="{{body}}"
                        data-bs-articleId="{{articleId}}">수정</button>
                <!-- 댓글 삭제 버튼-->
                <button type="button"
                        class="btn btn-sm btn-outline-danger comment-delete-btn"
                        data-comment-id="{{id}}">삭제</button>    <!--comment-delete-button 클래스 추가, 삭제할 댓글의 id를 가져옴-->
            </div>
            <div class="card-body">
                {{body}}
            </div>
        </div>
    {{/commentDtos}}
</div>


<!-- Modal -->
<div class="modal fade" id="comment-edit-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">댓글 수정</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- 댓글 수정 폼-->
                <form>
                    <!-- 닉네임 입력 -->
                    <div class="mb-3">
                        <label class="form-label">닉네임</label>
                        <input type="text" class="form-control form-control-sm" id="edit-comment-nickname">
                    </div>
                    <!-- 댓글 본문 입력 -->
                    <div class="mb-3">
                        <label class="form-label">댓글 내용</label>
                        <textarea type="text" class="form-control form-control-sm" rows="3" id="edit-comment-body"></textarea>
                    </div>
                    <!-- 히든 인풋 -->
                    {{#article}}   <!--댓글은 게시글에 포함되기 때문에 article의 id를 hidden input으로 가져야 함-->
                        <input type="hidden" id="edit-comment-id">
                        <input type="hidden" id="edit-comment-articleId">
                    {{/article}}
                    <!-- 전송 버튼 -->
                    <button type="button" class="btn btn-outline-primary btn-sm" id="comment-update-btn">수정 완료</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- 모달 이벤트 처리-->
<script>
{
    //모달 요소 선택
    const commentEditModal = document.querySelector("#comment-edit-modal");

    //모달 이벤트 감지
    commentEditModal.addEventListener("show.bs.modal", function(event) {
        //트리거 버튼 선택
        const triggerBtn = event.relatedTarget;

        //데이터 가져오기
        const id = triggerBtn.getAttribute("data-bs-id");
        const nickname = triggerBtn.getAttribute("data-bs-nickname");
        const body = triggerBtn.getAttribute("data-bs-body");
        const articleId = triggerBtn.getAttribute("data-bs-articleId");

        //데이터 반영
        document.querySelector("#edit-comment-nickname").value = nickname;
        document.querySelector("#edit-comment-body").value = body;
        document.querySelector("#edit-comment-id").value = id;    //hidden input으로 설정한 edit-comment-id, edit-comment-articleId의 값이 변경됨
        document.querySelector("#edit-comment-articleId").value = articleId;

    });
}

{
    // 수정 완료 버튼
    const commentUpdateBtn = document.querySelector("#comment-update-btn");

    //클릭 이벤트 감지 및 처리
    commentUpdateBtn.addEventListener("click", function() {
        //수정 댓글 객체 생성
        const comment = {
            id: document.querySelector("#edit-comment-id").value,
            nickname: document.querySelector("#edit-comment-nickname").value,
            body: document.querySelector("#edit-comment-body").value,
            article_id: document.querySelector("#edit-comment-articleId").value
        };

        console.log(comment);

        //수정 Rest API 호출 => fetch()사용
        const url = "/api/comments/" + comment.id;
        fetch(url, {
            method: "PATCH",     //patch요청
            body: JSON.stringify(comment),     //수정된 댓글 객체를 JSON으로 전달
            headers: {
                "Content-Type": "application/json"  //body에 담겨진 타입이 json임을 명시
            }
        }).then(response => {    //==.then(response, function() {})
            //http 응답 코드에 따른 메시지 출력
            const msg = (response.ok) ? "댓글이 수정되었습니다." : "댓글 수정 실패..!";
            alert(msg);
            //현재 페이지를 새로 고침
            window.location.reload();
        });
    });

}
</script>

<!-- 댓글 삭제 -->
<script>
{
    //삭제 버튼 선택
    const commentDeleteBtns = document.querySelectorAll(".comment-delete-btn"); //querySelector는 클래스 선택시  .클래스명
                                                                              //querySelector는 제일 먼저 발견되는 하나만을 반환하기때문에
                                                                              //=>querySelectorAll 로 변경!!
    //삭제 버튼 이벤트 처리
    commentDeleteBtns.forEach(btn => {    //여러개의 버튼을 반복해함 -> forEach()로 각각을 반복
        //각 버튼의 이벤트 처리를 등록
        btn.addEventListener("click", (event) => {
            //이벤트 발생 요소를 선택
            const commentDeleteBtn = event.srcElement;        //event.srcElement: 클릭 이벤트가 발생된 버튼을 가져옴. event.target으로 대체 가능

            //삭제 댓글 id 가져오기
            const commentId = commentDeleteBtn.getAttribute("data-comment-id");
            console.log(`삭제 버튼 클릭: ${commentId}번 댓글`);   // == "삭제 버튼 클릭:" + commentId + "번 댓글";

            //삭제 API 호출 및 처리
            const url= `/api/comments/${commentId}`;   //CommentApiController에서 @DeleteMapping("/api/comments/{id}")의 url
            fetch(url, {
                method: "DELETE"
            }).then(response => {
                //댓글 삭제 실패 처리
                if(!response.ok) {
                    alert("댓글 삭제 실패!");
                    return;
                }
                //삭제 성공시, 댓글을 화면에서 지우기
                const target = document.querySelector(`#comments-${commentId}`);
                target.remove();
            });

        });
    });
}
</script>